# -*- coding: utf-8 -*-
"""Estilizacion_de_tablas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J14BHNq7ekgQkHvTS5u3zd3bLdiKAoYp

<a href="https://colab.research.google.com/github/ahcamachod/2096-visualizacion-de-datos-estilizando-tablas-con-python/blob/main/Estilizacion_de_tablas.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>

# **Data Visualization: Estilizando tablas con python**

## **Extracción y preparación de los datos**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

ventas = pd.read_csv('https://gist.githubusercontent.com/ahcamachod/d2efadda3f3833d65da750c64705ac42/raw/80aef6f3bad210d34b67ed85565f039a30e2d9e0/ventas.csv', sep='#')
ventas.head()

ventas = ventas[['fecha_pedido','modo_envio','nombre_cliente','segmento_cliente','ciudad','provincia','region','departamento','tipo_producto','ventas','cantidad','ganancia']]
ventas.head(2)

print(f'Filas: {ventas.shape[0]}')
print(f'Columnas: {ventas.shape[1]}')

ventas.info()

ventas.isnull().sum()

from datetime import datetime

ventas['fecha_pedido'] = pd.to_datetime(ventas['fecha_pedido'], format='%Y-%m-%d')
ventas.head(2)

ventas.info()





sns.set_style('darkgrid')
sns.set_theme(rc={'axes.facecolor':'lightblue', 'figure.facecolor':'indigo'})
plt.figure(figsize=(20,6))

"""## Misión 1: Equipo de Ventas

Necesitamos construir una visualización para indicar los **10 principales clientes por total de ventas**.

Con ello, el equipo de ventas puede pensar en estrategias para mantener a estos clientes comprando en nuestra tienda.
"""

clientes = ventas.groupby('nombre_cliente')['ventas'].sum().nlargest(10).copy()
clientes = clientes.reset_index()
clientes

clientes.columns = ['Clientes', 'Ventas']
clientes

clientes['Ranking'] = clientes.index + 1
clientes

clientes.set_index('Ranking', inplace=True)
clientes

sns.set_style('darkgrid')
sns.set_theme(rc={'axes.facecolor':'lightblue', 'figure.facecolor':'indigo'})
plt.figure(figsize=(20,6))
barplot = sns.barplot(data=clientes, x='Clientes', y='Ventas',hue='Clientes', palette='viridis',edgecolor='indigo')
# Añadir los números encima de las barras
for bar in barplot.patches:
    plt.text(
        bar.get_x() + bar.get_width() / 2, # Get the center x-coordinate of the bar
        bar.get_height() + 0.1, # Get the y-coordinate (height of the bar)
        f'{bar.get_height():.2f}', # Format the value with 2 decimal places
        color='black',
        va='bottom', # Alinear verticalmente desde el fondo
        ha='center', # Centrar horizontalmente
        fontweight='bold',
    )
plt.title('Ventas por clientes', color='lightblue', fontsize=20, weight='bold')
plt.xlabel('Clientes', color='lightblue', fontsize=15, weight='bold')
plt.ylabel('Ventas', color='lightblue', fontsize=15, weight='bold')
plt.xticks(color='lightblue', fontsize=15, weight='bold', rotation=45)
plt.yticks(color='lightblue', fontsize=15, weight='bold')
plt.show()

"""# Misión 2: Equipo Comercial

Necesitamos construir una visualización que permita asociar el **total de ganancias en ventas y el total de lucros por tipo de producto**.

Ello permitirá que el equipo comercial pueda enfocarse en estrategias para apalancar los ingresos que se reciben con cada tipo de producto vendido en la tienda.
"""

estilo = clientes.style
estilo

ganancias_ventas = ventas.groupby(['tipo_producto'])[['ventas','ganancia']].sum()
ganancias_ventas

ganancias_ventas.index.name = 'Tipo de producto'
ganancias_ventas

estilo_producto = ganancias_ventas.style
estilo_producto

estilo_producto.format('$USD: {:,.2f}')

estilo_producto.format('$USD: {:,.2f}').highlight_max(color='green').highlight_min(color='orange')

#colores de intensos mayor=valor, colores suaves menor=valor
estilo_producto = estilo_producto.format('$USD: {:,.2f}').background_gradient(cmap='Blues')
estilo_producto

encabezado = {
    'selector': 'th',
    'props': 'font-weight:bold; font-family:Lucida Sans; text-aling:center; text-transform:capitalize; font-style:italic'
}

estilo_producto.set_table_styles([encabezado], overwrite=False)





"""# Misión 3: Equipo de Logística

Necesitamos construir una visualización que nos permita entender la **distribución de pedidos por región de Brasil**.

Así, el equipo de logística va a saber dónde hay más oportunidad de enfocar los esfuerzos de material y mano de obra.
"""

#libros = pd.read_csv('https://gist.githubusercontent.com/ahcamachod/52da15c2bbb31e4270b5c267dd051473/raw/62c366878ebd4be2ec899836413c8d1f3e116c01/tienda_libros.csv', sep=',')
#libros.head(2)

region = pd.DataFrame(ventas['region'].value_counts())
region.columns = ['N° Pedidos']
region.index.name = 'Región'
region

porcentaje = region['N° Pedidos'].to_numpy()
porcentaje = 100 * porcentaje / porcentaje.sum()
porcentaje

region['Porcentaje de Pedidos'] = porcentaje
region

estilo_region = region.style
estilo_region

encabezado_region = {
    'selector': 'th',
    'props': 'font-weight:bold; font-family:Lucida Sans; text-align:right; text-transform:capitalize; font-style:italic; background-color:black'
}

celdas_region = {
    'selector': 'td',
    'props': 'text-align:right;font-style:italic'
}

estilo_region = estilo_region.set_table_styles([encabezado_region], overwrite=False)

estilo_region = estilo_region.background_gradient(cmap='Blues')
estilo_region

estilo_region = estilo_region.set_table_styles([celdas_region], overwrite=False)
estilo_region

estilo_region.format({'Porcentaje de Pedidos':'{:.2f} %'})\
             .bar(subset='Porcentaje de Pedidos', vmin=0,vmax=100, color='darkviolet').background_gradient(cmap='Blues')

import pandas as pd
import numpy as np

datos = pd.DataFrame({'ID': [1204, 3018, 9963, 1005, 5627],
                   'Edad': [np.nan, 32, 19, np.nan, 38],
                   'Salario': [3500.00, 4200.50, 2800.00, 5700.25, 4900.75]})

s_nan = datos.style.format({'Edad':'{:.0f}','Salario':'{:,.2f}'})\
                   .highlight_null(color='#F79747')
s_nan

# Definir los límites superior e inferior
límite_superior = 5000.0
# El límite inferior se especifica a través de una Series que informa cuál es la columna que tendrá la aplicación de la función
límite_inferior = pd.Series([4000.0], index=['Salario'])

# Aplicar la estilización con highlight_between
s_bet = datos.style.format({'Edad':'{:.0f}','Salario':'{:,.2f}'})\
                   .highlight_between(left=límite_inferior, right=límite_superior,
                                      axis=1, color='#94B2D7')\
                  .text_gradient(cmap='inferno', subset='Salario')
s_bet

"""# Misión 4: Equipo de Logística

Nuevamente el equipo de logística desea replantear su estructura y organización de provisionamiento de productos e, para ello, se pensó en una visualización que permita identificar el estándar de la **cantidad de productos solicitados por mes por departamento**.
"""

meses = ventas.copy()
meses = meses.sort_values('fecha_pedido')
meses

meses['mes'] = meses['fecha_pedido'].dt.strftime('%Y - %b')
meses = meses.reset_index(drop=True)
meses

ventas_mensuales = meses.pivot_table(index=meses.departamento, columns='mes', values='cantidad', aggfunc='sum',sort='False')
ventas_mensuales

ventas_mensuales = ventas_mensuales.style
ventas_mensuales

ventas_mensuales = ventas_mensuales.background_gradient(cmap='Blues')
ventas_mensuales

encabezado_ventas = {
    'selector': 'th',
    'props': 'font-weight:bold; font-family:Lucida Sans; text-align:right; text-transform:capitalize; font-style:italic; background-color:black; color:yellow'
}

celdas_ventas = {
    'selector': 'td',
    'props': 'text-align:center;font-style:italic'
}

ventas_mensuales = ventas_mensuales.set_table_styles([encabezado_ventas], overwrite=False)
ventas_mensuales

ventas_mensuales = ventas_mensuales.set_table_styles([celdas_ventas], overwrite=False)
ventas_mensuales

pd.set_option('display.max_columns', None)
ventas_mensuales

ventas_mensuales.set_sticky(axis='index')

columnas = {
    'selector': 'col_heading',
    'props': 'font-weight:bold; font-family:Lucida Sans; text-align:right; text-transform:capitalize; font-style:italic; background-color:black; color:yellow'
}

tabla = {
    'selector': 'td,th',
    'props': ' text-align:left; text-transform:capitalize; font-style:italic'
}

indices = {
    'selector': '.index_name',
    'props': 'font-weight:bold; font-family:Lucida Sans; text-align:right; text-transform:capitalize; font-style:italic; color:yellow; background-color:red'
}

ventas_mensuales.set_table_styles([columnas,tabla,indices], overwrite=False)



"""# Misión 5: Informe de Desempeño

El informe de desempeño es un documento muy importante para la empresa. En este, todos los que trabajan en la tienda pueden entender cómo está la empresa. Debido a ello, las tablas bien construídas son esenciales para mostrar los datos de la mejor forma.

Por lo tanto, necesitamos construir una visualización que permita entender la **relación entre tipos de clientes y modo de envío de productos de acuerdo con las ventas**. De esta forma, será posible destacar en el informe cuál es el modo de envío y cuáles son los que más generaron lucro en las ventas.
"""

df_cliente = ventas.pivot_table(index='segmento_cliente', columns='modo_envio', values='ventas', aggfunc='sum')
df_cliente

df_cliente['Total'] = df_cliente.sum(axis=1)
df_cliente.loc['Total'] = df_cliente.sum()
df_cliente

compra_cliente = df_cliente.style.format('{:.2f}').background_gradient(cmap='Blues')
compra_cliente

tabla = {
    'selector': 'th',
    'props': 'font-weight:bold; font-family:Lucida Sans; text-align:right; text-transform:capitalize; font-style:italic; color:lightblue; background-color:black'
}

celdas = {
    'selector': 'td',
    'props': 'text-align:center;font-style:italic'
}

indice = {
    'selector': '.index_name',
    'props': 'font-weight:bold; font-family:Lucida Sans; text-align:right; text-transform:capitalize; font-style:italic; color:lightblue; background-color:black'
}

complar_cliente = compra_cliente.set_table_styles([tabla, celdas, indice], overwrite=False)
complar_cliente

compra_cliente.set_table_styles({
        'Total':[
            {
                'selector': 'th',
            'props': 'border-top: 3px solid darkviolet'
            },
            {
                'selector': 'td',
            'props': 'border-top: 3px solid darkviolet'
            }
        ],
        'B2B':[
            {
                'selector': 'th',
                'props': 'border-top: 3px solid darkviolets'
            },
            {
                'selector': 'td',
                'props': 'border-top: 3px solid darkviolet'
            }
        ]
    }, overwrite=False, axis=1)

compra_cliente.set_table_styles({
    'Total': [{
        'selector':'.true',
        'props': 'background-color:orange'
    }]
}, overwrite=False, axis=0)

colores_columna = pd.DataFrame(['false','true','false'], index= df_cliente['Total'].index, columns=['Total'])

compra_cliente.set_td_classes(colores_columna)

# Crear estilización
compra_cliente = df_cliente.style.format('{:,.2f}')

# Crear una visualización limpia
tabla = {
    'selector': 'td,th:not(.index_name)',
    'props': 'font-weight: normal; font-family: Arial; text-align: center'
}
index = {
    'selector': '.index_name',
    'props': 'font-weight: normal; text-align: right; font-style: italic; color: #696969'
}
compra_cliente.set_table_styles([tabla,index])

# Agregar líneas
compra_cliente.set_table_styles({
    'Total': [{
        'selector':'th',
        'props': 'border-top: 1px solid indigo'
    },
    {
        'selector':'td',
        'props': 'border-top: 1px solid indigo'
    }],
    'B2B':[{
        'selector':'th',
        'props': 'border-top: 1px solid indigo'
    },
    {
        'selector':'td',
        'props': 'border-top: 1px solid indigo'
    }]
}, overwrite = False, axis=1)

# Seleccionar y cambiar el fondo de la celda con el mayor valor de Total
compra_cliente.set_table_styles({
    'Total': [{
        'selector': '.true',
        'props': 'background-color: orange'
    }]
},overwrite=False,axis=0)

colores_columna = pd.DataFrame(['false','true','false'],index= df_cliente['Total'].index,
                            columns = ['Total'])
compra_cliente = compra_cliente.set_td_classes(colores_columna)
compra_cliente

tabla = {
    'selector': 'th',
    'props': 'font-weight:bold; font-family:Lucida Sans; text-align:right; text-transform:capitalize; font-style:italic; color:lightblue; background-color:black'
}

celdas = {
    'selector': 'td',
    'props': 'text-align:center;font-style:italic'
}

indice = {
    'selector': '.index_name',
    'props': 'font-weight:bold; font-family:Lucida Sans; text-align:right; text-transform:capitalize; font-style:italic; color:lightblue; background-color:black'
}

compra_cliente = compra_cliente.set_table_styles([tabla, celdas, indice], overwrite=False)
compra_cliente

compra_cliente = compra_cliente.background_gradient(cmap='Blues')
compra_cliente

import pandas as pd

df = pd.DataFrame({
    'Región': ['Norte', 'Norte', 'Norte', 'Norte', 'Sur', 'Sur', 'Sur', 'Sur'],
    'Producto': ['Producto A', 'Producto B', 'Producto A', 'Producto B', 'Producto A', 'Producto B', 'Producto A', 'Producto B'],
    'Ventas': [100, 50, 150, 200, 70, 120, 110, 80],
    'Fecha': ['01/2022', '01/2022', '02/2022', '02/2022', '01/2022', '01/2022', '02/2022', '02/2022']
})

df.pivot_table(values='Ventas', index='Región', columns='Producto', aggfunc='mean')

df.pivot(index=['Región', 'Producto'], columns='Fecha', values='Ventas')